{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "private_outputs": true,
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Wq6G6KKk28gf"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "from fastapi import FastAPI\n",
        "\n",
        "df_steam = pd.read_csv('steam_games.csv')\n",
        "\n",
        "# Realiza la conversión de precio en df_steam\n",
        "df_steam['price'] = df_steam['price'].apply(lambda x: float(x.replace('$', '').replace(',', '')) if isinstance(x, str) and x.replace('$', '').replace(',', '').replace('.', '').isdigit() else 0.0)\n",
        "\n",
        "# Otras lecturas de datos...\n",
        "\n",
        "app = FastAPI()\n",
        "\n",
        "@app.get(\"/userdata/{user_id}\")\n",
        "async def userdata(user_id: str):\n",
        "    try:\n",
        "        Cantidad = 0\n",
        "        recommend_count = 0\n",
        "        total_reviews = 0\n",
        "        item_ids = set()\n",
        "\n",
        "        # Configura el tamaño del lote para la lectura de reviews\n",
        "        chunk_size = 100000\n",
        "        user_reviews_generator = pd.read_csv('reviews.csv', chunksize=chunk_size)\n",
        "\n",
        "        for chunk in user_reviews_generator:\n",
        "            user_reviews = chunk[chunk['user_id'] == user_id]\n",
        "\n",
        "            # Procesa los datos del lote actual\n",
        "            Cantidad += user_reviews.merge(df_steam[['id', 'price']], left_on='item_id', right_on='id', how='inner')['price'].sum()\n",
        "            recommend_count += user_reviews['recommend'].sum()\n",
        "            total_reviews += len(user_reviews)\n",
        "            item_ids.update(user_reviews['item_id'].unique())\n",
        "\n",
        "        #Calcula el porcentage de recomendaciones\n",
        "        if total_reviews > 0:\n",
        "            porcentaje = (recommend_count / total_reviews) * 100\n",
        "        else:\n",
        "            porcentaje = 0\n",
        "        #Cuenta los numeros de items\n",
        "        cantidad_de_items = len(item_ids)\n",
        "\n",
        "        user_data = {\n",
        "            \"Cantidad de dinero gastado\": Cantidad,\n",
        "            \"recommend_porcentaje\": porcentaje,\n",
        "            \"cantidad de items\": cantidad_de_items\n",
        "        }\n",
        "\n",
        "        return user_data\n",
        "\n",
        "    except Exception as e:\n",
        "        return {\"message\": f\"Error: {str(e)}\"}\n",
        "\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "\n",
        "\n",
        "# Cargar el DataFrame df_steam desde tu archivo CSV\n",
        "df_steam2 = pd.read_csv('steam_games.csv')\n",
        "\n",
        "@app.get(\"/recomendacion_juego/{product_id}\")\n",
        "async def recomendacion_juego(product_id: int):\n",
        "    try:\n",
        "        # Obtener el ID del juego\n",
        "        target_game = df_steam2[df_steam2['id'] == product_id]\n",
        "\n",
        "        if target_game.empty:\n",
        "            return {\"message\": \"No se encontró el juego de referencia.\"}\n",
        "\n",
        "        # Combina las etiquetas (tags) y géneros en una sola cadena de texto\n",
        "        target_game_tags_and_genres = ' '.join(target_game['tags'].fillna('').astype(str) + ' ' + target_game['genres'].fillna('').astype(str))\n",
        "\n",
        "        # Crea un vectorizador TF-IDF\n",
        "        tfidf_vectorizer = TfidfVectorizer()\n",
        "\n",
        "        # Configura el tamaño del lote para la lectura de juegos\n",
        "        chunk_size = 100  # Tamaño del lote (puedes ajustarlo según tus necesidades)\n",
        "        similarity_scores = None\n",
        "\n",
        "        # Procesa los juegos por lotes utilizando chunks\n",
        "        for chunk in pd.read_csv('steam_games.csv', chunksize=chunk_size):\n",
        "            # Combina las etiquetas (tags) y géneros de los juegos en una sola cadena de texto\n",
        "            chunk_tags_and_genres = ' '.join(chunk['tags'].fillna('').astype(str) + ' ' + chunk['genres'].fillna('').astype(str))\n",
        "\n",
        "            # Aplica el vectorizador TF-IDF al lote actual de juegos y al juego de referencia\n",
        "            tfidf_matrix = tfidf_vectorizer.fit_transform([target_game_tags_and_genres, chunk_tags_and_genres])\n",
        "\n",
        "            # Calcula la similitud entre el juego de referencia y los juegos del lote actual\n",
        "            if similarity_scores is None:\n",
        "                similarity_matrix = cosine_similarity(tfidf_matrix)\n",
        "                similarity_scores = cosine_similarity(similarity_matrix, similarity_scores)\n",
        "            else:\n",
        "                similarity_matrix = cosine_similarity(tfidf_matrix)\n",
        "                similarity_scores = cosine_similarity(similarity_matrix, similarity_scores)\n",
        "\n",
        "        if similarity_scores is not None:\n",
        "            # Obtiene los índices de los juegos más similares\n",
        "            similar_games_indices = similarity_scores[0].argsort()[::-1]\n",
        "\n",
        "            # Recomienda los juegos más similares (puedes ajustar el número de recomendaciones)\n",
        "            num_recommendations = 5\n",
        "            recommended_games = df_steam2.loc[similar_games_indices[1:num_recommendations + 1]]\n",
        "\n",
        "            # Devuelve la lista de juegos recomendados\n",
        "            return recommended_games[['app_name','id']].to_dict(orient='records')\n",
        "\n",
        "        return {\"message\": \"No se encontraron juegos similares.\"}\n",
        "\n",
        "    except Exception as e:\n",
        "        return {\"message\": f\"Error: {str(e)}\"}"
      ]
    }
  ]
}
